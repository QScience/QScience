<?php

/**
 * Implements node_create_for_REFERENCE_TYPE hook to able to create lazy referencing.
 */
function qscience_node_create_for_author_reference($node_title, $language) {
  global $user;
  
  $node = new stdClass();
  $node->title = $node_title;
  $split = explode(" ", $node->title);
  $first_name = isset($split[0]) ? $split[0] : 'unknown';
  $last_name = isset($split[1]) ? implode(" ", array_splice($split, 1)) : '';

  $node->first_name = array(
    $language => array(
      array(
        'value' => $first_name
      )
    )
  );
  $node->last_name = array(
    $language => array(
      array(
        'value' => $last_name
      )
    )
  );
  $node->type = "author";
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = $language; // Or e.g. 'en' if locale is enabled
  $node->uid = $user->uid;
  $node->status = 1; //(1 or 0): published or not
  $node->promote = 0; //(1 or 0): promoted to front page
  $node->comment = 1; //2 = comments on, 1 = comments off

  $node = node_submit($node); // Prepare node for saving
  node_save($node);
  
  return $node->nid;
}

/**
 * Implements node_create_for_REFERENCE_TYPE hook to able to create lazy referencing.
 */
function qscience_node_create_for_citation_reference($citation_title, $language) {
  global $user;
  
  $pos = strpos(strtolower($citation_title), "[authors:");
  $authors = array();
  if ($pos !== FALSE) {
    $authors = explode(",", substr($citation_title, $pos + 9, strlen($citation_title) - $pos - 10));
    $citation_title = substr($citation_title, 0, $pos);
  }
  $citation_node = FALSE;
  $citation_nid = _qscience_check_if_node_exists($citation_title, 'paper');
  if ($citation_nid === FALSE) {
  //  dvm($authors);
    $citation_node = new stdClass();
    $citation_node->title = trim($citation_title);
    $citation_node->type = "paper";
    node_object_prepare($citation_node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $citation_node->language = $language; // Or e.g. 'en' if locale is enabled
    $citation_node->uid = $user->uid;
    $citation_node->status = 1; //(1 or 0): published or not
    $citation_node->promote = 0; //(1 or 0): promoted to front page
    $citation_node->comment = 1; //2 = comments on, 1 = comments off

    $citation_node = node_submit($citation_node); // Prepare node for saving
  } else {
    $citation_node = node_load($citation_nid);
  }
  
  $citation_targets = array();
  if (!isset($citation_node->author_reference[$language])) {
    $citation_node->author_reference[$language] = array();
  } else {
    foreach ($citation_node->author_reference[$language] as $key => $val) {
      $citation_targets[] = $val['target_id'];
    }
  }
   
  foreach ($authors as $author_name) {
    $author_name = trim($author_name);
    $author_nid = _qscience_check_if_node_exists($author_name, 'author');
    
    if ($author_nid === FALSE) {
      $author_node = new stdClass();
      $author_node->title = $author_name;
      $split = explode(" ", $author_name);
      $first_name = isset($split[0]) ? $split[0] : 'unknown';
      $last_name = isset($split[1]) ? implode(" ", array_splice($split, 1)) : '';

      $author_node->first_name = array(
        $language => array(
          array(
            'value' => $first_name
          )
        )
      );
      $author_node->last_name = array(
        $language => array(
          array(
            'value' => $last_name
          )
        )
      );
      $author_node->type = "author";
      node_object_prepare($author_node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
      $author_node->language = $language; // Or e.g. 'en' if locale is enabled
      $author_node->uid = $user->uid;
      $author_node->status = 1; //(1 or 0): published or not
      $author_node->promote = 0; //(1 or 0): promoted to front page
      $author_node->comment = 1; //2 = comments on, 1 = comments off

      $author_node = node_submit($author_node); // Prepare node for saving

      node_save($author_node);
      $author_nid = $author_node->nid;
    }
    if (!in_array($author_nid, $citation_targets)) {
      $citation_node->author_reference[$language][] = array(
        'target_id' => $author_nid,
      );
    }
  }
  
  node_save($citation_node);  
  
  return $citation_node->nid;
}

function _qscience_check_if_node_exists($match, $node_type) {
  $nid = FALSE;
  $query = db_select('node', 'n')
    ->condition('n.type', $node_type, '=')
    ->condition('n.title', $match, '=')
    ->fields('n', array('nid'))
    ->execute();
  
  $row_count = $query->rowCount();
  if ($row_count > 0) {
    while ($row = $query->fetchAssoc()) {
      $nid = (int)$row['nid'];
      break;
    }
  }
//  dpm($result);
  return $nid;
}

/**
 * Implements file_insert
 */
function qscience_file_insert($file) {
  if ($_POST['form_id'] == 'paper_node_form') {
    qscience_paper_uploaded($file);
  }
}

function qscience_paper_uploaded($file) {
  foreach (module_implements('paper_uploaded') as $module) {
    if ($module === 'qscience') continue;
    module_invoke($module, 'paper_uploaded', $file);
  }
}

function qscience_form_paper_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_css(drupal_get_path('module', 'qscience') . '/css/qscience.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
}

function qscience_views_api() {
  return array(
    'api' => '3.0'
  );
}


